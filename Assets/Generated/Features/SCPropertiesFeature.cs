// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using UnityEngine;
using System.Collections.Generic;
using Articy.Unity.Interfaces;
using Articy.Unity;
using Articy.ProjectTheseus;

namespace Articy.ProjectTheseus.Features
{
    
    
    [Serializable()]
    public class SCPropertiesFeature : IArticyBaseObject, IPropertyProvider
    {
        
        [SerializeField()]
        private Boolean mm_OnScreen = new Boolean();
        
        [SerializeField()]
        private ArticyValueArticyScriptCondition mm_CharProperties = new ArticyValueArticyScriptCondition();
        
        [SerializeField()]
        private Boolean mm_NPC = new Boolean();
        
        [SerializeField()]
        private Single mm_ID;
        
        [SerializeField()]
        private Single mm_HP;
        
        [SerializeField()]
        private Single mm_MP;
        
        public Boolean m_OnScreen
        {
            get
            {
                return mm_OnScreen;
            }
            set
            {
                mm_OnScreen = value;
            }
        }
        
        public ArticyScriptCondition m_CharProperties
        {
            get
            {
                return mm_CharProperties.GetValue();
            }
            set
            {
                mm_CharProperties.SetValue(value);
            }
        }
        
        public Boolean m_NPC
        {
            get
            {
                return mm_NPC;
            }
            set
            {
                mm_NPC = value;
            }
        }
        
        public Single m_ID
        {
            get
            {
                return mm_ID;
            }
            set
            {
                mm_ID = value;
            }
        }
        
        public Single m_HP
        {
            get
            {
                return mm_HP;
            }
            set
            {
                mm_HP = value;
            }
        }
        
        public Single m_MP
        {
            get
            {
                return mm_MP;
            }
            set
            {
                mm_MP = value;
            }
        }
        
        private void CloneProperties(object aClone)
        {
            Articy.ProjectTheseus.Features.SCPropertiesFeature newClone = ((Articy.ProjectTheseus.Features.SCPropertiesFeature)(aClone));
            newClone.m_OnScreen = m_OnScreen;
            if ((m_CharProperties != null))
            {
                newClone.m_CharProperties = ((ArticyScriptCondition)(m_CharProperties.CloneObject()));
            }
            newClone.m_NPC = m_NPC;
            newClone.m_ID = m_ID;
            newClone.m_HP = m_HP;
            newClone.m_MP = m_MP;
        }
        
        public object CloneObject()
        {
            Articy.ProjectTheseus.Features.SCPropertiesFeature clone = new Articy.ProjectTheseus.Features.SCPropertiesFeature();
            CloneProperties(clone);
            return clone;
        }
        
        public virtual bool IsLocalizedPropertyOverwritten(string aProperty)
        {
            return false;
        }
        
        #region property provider interface
        public void setProp(string aProperty, object aValue)
        {
            if ((aProperty == "m_OnScreen"))
            {
                m_OnScreen = System.Convert.ToBoolean(aValue);
                return;
            }
            if ((aProperty == "m_CharProperties"))
            {
                m_CharProperties = ((ArticyScriptCondition)(aValue));
                return;
            }
            if ((aProperty == "m_NPC"))
            {
                m_NPC = System.Convert.ToBoolean(aValue);
                return;
            }
            if ((aProperty == "m_ID"))
            {
                m_ID = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "m_HP"))
            {
                m_HP = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "m_MP"))
            {
                m_MP = System.Convert.ToSingle(aValue);
                return;
            }
        }
        
        public Articy.Unity.Interfaces.ScriptDataProxy getProp(string aProperty)
        {
            if ((aProperty == "m_OnScreen"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(m_OnScreen);
            }
            if ((aProperty == "m_CharProperties"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(m_CharProperties);
            }
            if ((aProperty == "m_NPC"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(m_NPC);
            }
            if ((aProperty == "m_ID"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(m_ID);
            }
            if ((aProperty == "m_HP"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(m_HP);
            }
            if ((aProperty == "m_MP"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(m_MP);
            }
            return null;
        }
        #endregion
    }
}
